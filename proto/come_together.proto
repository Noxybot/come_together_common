syntax = "proto3";
package come_together_grpc;

message image{
    enum type {
        NOT_SET = 0;
        BINARY = 1;
        URL = 2;
        UUID = 3; //just uuid of image, without data
    }
    oneof data{
        bytes binary = 1;
        string text = 2;
    }
    string uuid = 3;
    int32 sequence_number = 4;
    type typ = 5;
}

message access_token{
    string value = 1;
}

message application_id{
    string id = 1;
}

service MainEndpoint{
    rpc AskToken(ask_token_request) returns (ask_token_response) {}
    rpc VerifyToken(verify_token_request) returns (verify_token_response) {}
    //**********************************************************//
    rpc Check(check_request) returns (check_response) {} //check email, login
    rpc RegisterUser(register_request) returns (register_response) {}
    rpc LoginUser(login_request) returns (login_response) {}
    rpc LogoutUser(logout_request) returns (logout_response) {}
    //**********************************************************//
    rpc AddMarker(add_marker_request) returns (add_marker_response) {}
    rpc DeleteMarker(delete_marker_request) returns (delete_marker_reponse) {}
    //may be unused (for now)
    rpc GetAllMarkers(access_token) returns (stream marker_info) {}
    //**********************************************************//
    //may be unused (for now)
    rpc GetInfo(get_info_request) returns (get_info_response) {} //about user, marker, chat
    rpc UpdateInfo(update_info_request) returns (update_info_response) {} //about user, marker
    //**********************************************************//
    rpc ManageImage(manage_image_request) returns (manage_image_response) {} //upload/delete user, marker image
    rpc GetImages(get_images_request) returns (stream image) {} //user, marker
    //**********************************************************//
    rpc SendChatMessage(send_chat_message_request) returns (send_chat_message_response) {}
    rpc GetChatMessages(get_chat_messages_request) returns (stream chat_message) {}
    //**********************************************************//
    /*
    * Events:
    * Add new marker to map or message to chat
    * Edit existing marker, message or user profile
    * Delete existing marker or image
    */
    rpc SubscribeToEvents(access_token) returns (stream event) {}
    rpc SendPushToken(send_push_token_request) returns (send_push_token_response) {}
    rpc JoinChat(join_request) returns (join_response) {}
    rpc GetUserChats(get_chats_request) returns (stream chat_info) {}
}

message get_chats_request{
    string uuid = 1;
}

message join_request {
    string user_uuid = 1;
    string chat_uuid = 2;
}

message join_response{
    enum result {
        NOT_SET = 0;
        OK = 1;
        NOT_FOUND = 2;
    }
    result res = 1;
    repeated string parts_uuid = 2;
}

service VerificationService{
    rpc ValidatePhoto (stream validate_photo_request) returns ( validate_photo_response) {}
}

message validate_photo_request{
    enum gestue_type{
        NOT_SET = 0;
        OK = 1;
        POINTER = 2;
    }
    bytes user_photo = 1;
    bytes validation_photo = 2;
    bool user_photo_complete = 3;
    bool validation_photo_complete = 4;
    application_id app_id = 5;
    gestue_type gestue = 6;
}
enum verification_result{
	NOT_SET = 0;
	OK = 1;
	WRONG_GESTUE = 2;
	WRONG_FACE = 3;
}
message validate_photo_response{

	verification_result res = 1;
}

service RecomendationService{
    rpc GetRecomendationForUser (get_recomendation_request) returns (stream get_recomendation_response) {}
}

message get_recomendation_request{
    string uuid = 1;
}
message get_recomendation_response{
	string marker_id = 1;
}


message logout_request{
    access_token token = 1;
}

message logout_response{
    enum result{
        NOT_SET = 0;
        OK = 1;
        TOKEN_NOT_FOUND = 2;
        OTHER = 999;
    }
    result res = 1;
}

message send_push_token_request{
    application_id app_id = 1;
    string push_token = 2;
}

message send_push_token_response{
    enum result{
        NOT_SET = 0;
        OK = 1;
        USER_NOT_LOGGED_IN = 2;
        OTHER = 3;
    }
    result res = 1;
}

message delete_marker_request{
    access_token token = 1;
    string marker_uuid = 2;
}

message delete_marker_reponse{
    enum result{
        NOT_SET = 0;
        OK = 1;
        INSUFFICIENT_PERMISIONS = 2;
        MARKER_NOT_FOUND = 3;
        OTHER = 999;
    }
    result res = 1;
}

message ask_token_request{
    string email = 1;
}

message ask_token_response{
    enum result{
        NOT_SET = 0;
        OK = 1;
        MAIL_WAS_NOT_SENT = 2;
        OTHER = 999;
    }
    result res = 1;
}

message verify_token_request{
    string email = 1;
    string token = 2;
}

message verify_token_response{
    enum result{
        NOT_SET = 0;
        OK = 1;
        EMAIL_NOT_FOUND = 2;
        WRONG_TOKEN = 3;
        OTHER = 999;
    }
    result res = 1;
}

message update_info_request{
    enum update_type{
        NOT_SET = 0;
        MARKER = 1;
        USER = 2;
    }
    access_token token = 1;
    update_type type = 2;
    oneof data{
        marker_info m_info = 3;
        user_info u_info = 4;
    }
}

message update_info_response{
    enum result{
        NOT_SET = 0;
        OK = 1;
        INSUFFICIENT_PERMISIONS = 2;
        OTHER = 999;
    }
    result res = 1;
}

message event{
    enum type{
        NOT_SET = 0;
        MARKER_ADDED = 1;
        MARKER_EDITED = 2;
        MARKER_DELETED_BY_USER = 3;
        MARKER_DELETED_BY_TIMEOUT = 4;
        MESSAGE_ADDED = 5;
        MESSAGE_EDITED = 6;
        MESSAGE_DELETED = 7;
        USER_UPDATED = 8;
        USER_ADDED_TO_CHAT = 9;
    }
    type event_type = 1;
    oneof data{
        marker_info m_info = 2;
        chat_message c_message = 3;
        user_info u_info = 4;
    }
}

message chat_info{
    string uuid = 1;
    string title = 2; //empty for personal chats
    repeated string participants_uuid = 3;
    string last_visible_message = 4;
    string marker_uuid = 5;
}

message get_chat_messages_request{
    string token = 1;
    string chat_uuid = 2;
    int32 page_size = 3; //how many messages will be returned
    int32 page_number = 4;
    string hash = 5; //MD5 hash of page_size last messages uuid
}

message chat_message{
    enum message_content{
        NOT_SET = 0;
        TEXT = 1;
        //IMAGE = 1;
    }
    message_content content_type = 1;
    string sender_uuid = 2;
    oneof content{
        string text = 3;
        //bytes photo = n;
    }
    int64 sent_unix_time = 4;
    //for personal chat uuid is MD5 of sender + target uuids
    string chat_uuid = 5;
    int64 sequence_number = 6;
    string uuid = 7; //filled only by server
}

message send_chat_message_request{
    access_token token = 1;
    chat_message message = 2;
}

message send_chat_message_response{
    enum result{
        NOT_SET = 0;
        OK = 1;
        CHAT_DOES_NOT_EXIST = 2;
        USER_DOES_NOT_EXIST = 3;
        INSUFFICIENT_PERMISIONS = 4;
        OTHER = 999;
    }
    result res = 1;
    int64 actual_sequence_number = 2;
    string message_uuid = 4;
}

message get_info_request{
    enum type{
        NOT_SET = 0;
        USER = 1;
        MARKER = 2;
        CHAT = 3;
    }
    type info_type = 1;
    string token = 2;
    string target_uuid = 3; //user uuid or chat uuid
}

message get_info_response{
    oneof data{
        user_info u_info = 1;
        marker_info m_info = 2;
        chat_info c_info = 3;
        //generic_chat_info = 4;
    }
}

message get_images_request{
    enum type{
        NOT_SET = 0;
        USER = 1;
        MARKER = 2;
        //CHAT_MESSAGE_IMAGE
    }
    type image_type = 1;
    string target_uuid = 2; //user or marker uuid
    access_token token = 3;
    int32 amount = 4; //-1 means all images
    string hash = 5; //MD5 hash of n last uuids; if it haven`t changed, server will not send images
    int32 starting_sequence_number = 6;
}

message manage_image_request{
    enum action{
        NOT_SET = 0;
        UPLOAD_USER_IMAGE = 1;
        DELETE_USER_IMAGE = 2;
        UPLOAD_MARKER_IMAGE = 3;
        DELETE_MARKER_IMAGE = 4;
    }
    action act = 1;
    access_token token = 2;
    string target_uuid = 3; //user or marker uuid
    oneof data{
        bytes image = 4; //for uploading
        string image_uuid = 5; //for deleting
    }
}

message manage_image_response{
    enum result{
        NOT_SET = 0;
        OK = 1;
        INSUFFICIENT_PERMISIONS = 2;
        OTHER = 999;
    }
    result res = 1;
    /*optional*/ string image_uuid = 2; //when image is uploaded
    /*optional*/ int32 image_sequence_number = 3; //when image is uploaded
}

message check_request{
    enum type{
        NOT_SET = 0;
        EMAIL = 1;
        LOGIN = 2;
    }
    type check_type = 1;
    string data = 2;
}

message check_response{
    enum result{
        NOT_SET = 0;
        AVAILABLE = 1;
        TAKEN = 2;
        OTHER = 999;
    }
    result res = 1;
}

message login_request{
    enum type{
        NOT_SET = 0;
        BY_LOGIN_PASSWORD = 1;
        BY_ACCESS_TOKEN = 2;
        BY_GOOGLE_TOKEN = 3;
    }
    type typ = 1;
    string login = 2;
    string password = 3;
    access_token token = 4;
    application_id app_id = 5;
}

message login_response{
    enum result{
        NOT_SET = 0;
        OK = 1;
        USER_NOT_FOUND = 2;
        WRONG_PASSWORD = 3;
        ACCESS_TOKEN_NOT_FOUND = 4;
        OTHER = 999;
    }
    result res = 1;
    /*optional*/ user_info info = 2;
    access_token token = 3;
}

message register_request{
    user_info info = 1;
}

message register_response{
    enum result{
        NOT_SET = 0;
        OK = 1;
        EMAIL_ALREADY_TAKEN = 2;
        LOGIN_ALREADY_TAKEN = 3;
        OTHER = 999;
    }
    result res = 1;
    /*optional*/ string user_uuid = 2;
}

message user_info{
    /*optional*/ string uuid = 1; //absent in register_request
    string email = 2;
    string login = 3;
    string password = 4;
    string first_name = 5;
    /*optional*/ string last_name = 6; //may be absent
    /*optional*/ repeated image images = 7; //absent in register_request or may be empty
    /*optional*/ string other_info_json = 8; //may be absent
    verification_result verif_result = 9;

}

message marker_info{
    enum sub_category{
       CYCLING = 0;
       FOOTBALL = 1;
       BASKETBALL = 2;
       RUNNING = 3;
       GYM = 4;
       GALLERY = 5;
       EXCURSION = 6;
       THEATER = 7;
       CINEMA = 8;
       BAR = 9;
       RESTAURANT = 10;
       NIGTH_CLUB = 11;
       HOOKAH = 12;
       CAFE = 13;
       WALK = 14;
       CONCERT = 15;
       QUEST = 16;
       ZOO = 17;
       OTHER_SUBCATEGORY = 18;
    }
    enum category{
        OTHER_CATEGORY = 0;
        SPORT = 1;
        WATCH = 2;
        EAT = 3;
        NIGHT_LIFE = 4;

    }
    enum type{
        NOT_SET_MARKER_TYPE = 0;
        PRIVATE = 1;
        GROUP = 2;
    }
    sub_category sub_cat = 1;
    category cat = 2;
    type marker_type = 3;
    int64 from_unix_time = 4;
    int64 to_unix_time = 5;
    int64 creation_unix_time = 6;
    string creator_uuid = 7;
    string display_name = 8;
    double latitude = 9;
    double longitude = 10;
    /*optional*/ string uuid = 11;
    /*optional*/ string chat_uuid = 12; //for PRIVATE should not be present
    repeated image images = 13; //empty in add_marker_request
    string other_data_json = 14;
    chat_info c_info = 15; //need to be removed
    string address = 16;
    string description = 17;
    int32 people_from = 18;
    int32 people_to = 19;
    int32 expenses_from = 20;
    int32 expenses_to = 21;
}

message add_marker_request{
    marker_info info = 1;
}

message add_marker_response{
    enum result{
        NOT_SET = 0;
        OK = 1;
        TIME_INTERVAL_TOO_SMALL = 2;
        CREATION_TIME_OUTDATED = 3;
        OTHER = 999;
    }
    result res = 1;
    /*optinal*/ string uuid = 2;
    /*optional*/ string chat_uuid = 3; //for PRIVATE markers chat is not created
}
